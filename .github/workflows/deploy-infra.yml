name: Deploy Infrastructure to AWS

on:
  pull_request:
    branches: [main]
    paths: ['infrastructure/**']
  push:
    branches: [main]
    paths: ['infrastructure/**']

# CRITICAL: This block is required for OIDC authentication to AWS.
permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    
    defaults:
      run:
        shell: bash
        # This ensures all 'run' steps execute in the correct directory.
        working-directory: ./infrastructure

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # This step securely authenticates with AWS using the secrets you created.
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TERRAFORM_IAM_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        # This ensures the workflow doesn't stop if the plan has an error on a PR.
        continue-on-error: true

      - name: Update Pull Request with Plan
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
            
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          # Get the short Git commit SHA
          GIT_SHA=$(git rev-parse --short HEAD)
          
          # Pass the SHA as a variable to terraform apply
          # This forces a new revision of the Batch Job Definition on every push.
          terraform apply -auto-approve -var="image_version=${GIT_SHA}"
