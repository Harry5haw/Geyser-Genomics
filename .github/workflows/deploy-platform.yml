# .github/workflows/deploy-platform.yml
name: Deploy Platform to AWS

on:
  push:
    branches: [ main ]
    paths: [ 'app/**', 'infrastructure/**', 'Dockerfile' ]
  pull_request:
    paths: [ 'infrastructure/**', 'Dockerfile' ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  pull-requests: write

concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # --- JOB 1: Build & push image (main only) ---
  build-application:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    name: Build and Push App to ECR
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
    outputs:
      image_tag: ${{ steps.get-sha.outputs.sha }}
    steps:
      - uses: actions/checkout@v4
      - name: Get short Git SHA
        id: get-sha
        run: echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ECR_IAM_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
      - id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build, Tag, and Push Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: geyser-app
          IMAGE_TAG: ${{ steps.get-sha.outputs.sha }}
        run: |
          docker build --no-cache -f Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  # --- JOB 2: Terraform PLAN for PRs (no image push needed) ---
  terraform-plan:
    if: github.event_name == 'pull_request'
    name: Terraform Plan (PR)
    runs-on: ubuntu-latest
    environment:
      name: dev
    defaults:
      run:
        shell: bash
        working-directory: ./infrastructure
    steps:
      - uses: actions/checkout@v4
      - name: Get short Git SHA
        id: get-sha
        run: echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TERRAFORM_IAM_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6
      - name: Write terraform.tfvars from secret
        run: |
          umask 077
          cat > terraform.tfvars << 'EOF'
          ${{ secrets.TERRAFORM_TFVARS }}
          EOF
      - run: terraform init -input=false -lock-timeout=5m
      - run: terraform validate -no-color
      - name: Terraform Plan
        env:
          IMAGE_TAG: ${{ steps.get-sha.outputs.sha }}
        run: |
          terraform plan \
            -no-color \
            -input=false \
            -lock-timeout=5m \
            -var-file=terraform.tfvars \
            -var="image_version=${IMAGE_TAG}"

  # --- JOB 3: Terraform APPLY for main (depends on image push) ---
  terraform-apply:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    name: Terraform Apply (main)
    runs-on: ubuntu-latest
    needs: build-application     # ensure image is pushed before apply
    environment:
      name: prod
    defaults:
      run:
        shell: bash
        working-directory: ./infrastructure
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TERRAFORM_IAM_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6
      - name: Write terraform.tfvars from secret
        run: |
          umask 077
          cat > terraform.tfvars << 'EOF'
          ${{ secrets.TERRAFORM_TFVARS }}
          EOF
      - run: terraform init -input=false -lock-timeout=5m
      - name: Terraform Apply
        env:
          IMAGE_TAG: ${{ needs.build-application.outputs.image_tag }}
        run: |
          terraform apply \
            -auto-approve \
            -input=false \
            -lock-timeout=5m \
            -var-file=terraform.tfvars \
            -var="image_version=${IMAGE_TAG}"
