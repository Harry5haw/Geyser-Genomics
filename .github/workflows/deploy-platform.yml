name: Deploy Platform to AWS

on:
  push:
    branches:
      - '**'
    paths:
      - 'app/**'
      - 'infrastructure/**'
      - 'Dockerfile'
  pull_request:
    paths:
      - 'infrastructure/**'
      - 'Dockerfile'
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: read
  pull-requests: write

concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # --- JOB 1: Build and Push the Application Image ---
  build-application:
    name: Build and Push App to ECR
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.get-sha.outputs.sha }}
    steps:
      - uses: actions/checkout@v4

      - name: Get short Git SHA
        id: get-sha
        run: echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ECR_IAM_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Verify AWS Identity
        run: aws sts get-caller-identity

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, Tag, and Push Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: geyser-app
          IMAGE_TAG: ${{ steps.get-sha.outputs.sha }}
        run: |
          docker build --no-cache -f Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "Successfully pushed image with tag: $IMAGE_TAG"

  # --- JOB 2: Terraform Plan on PRs ---
  plan-pr:
    name: Terraform Plan (PR)
    runs-on: ubuntu-latest
    needs: build-application
    if: github.event_name == 'pull_request'
    environment: dev
    defaults:
      run:
        shell: bash
        working-directory: ./infrastructure
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TERRAFORM_IAM_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Verify AWS Identity
        run: aws sts get-caller-identity

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3

      - name: Write terraform.tfvars from secret
        run: |
          umask 077
          cat > terraform.tfvars << 'EOF'
          ${{ secrets.TERRAFORM_TFVARS }}
          EOF

      - name: Terraform Init
        run: terraform init -input=false -lock-timeout=5m

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan
        env:
          IMAGE_TAG: ${{ needs.build-application.outputs.image_tag }}
        run: |
          terraform plan \
            -no-color \
            -input=false \
            -lock-timeout=5m \
            -var-file=terraform.tfvars \
            -var="image_version=${IMAGE_TAG}"

  # --- JOB 3: Terraform Apply for prod (main) ---
  apply-prod:
    name: Terraform Apply (prod)
    runs-on: ubuntu-latest
    needs: build-application
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: prod
    defaults:
      run:
        shell: bash
        working-directory: ./infrastructure
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TERRAFORM_IAM_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Verify AWS Identity
        run: aws sts get-caller-identity

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3

      - name: Write terraform.tfvars from secret
        run: |
          umask 077
          cat > terraform.tfvars << 'EOF'
          ${{ secrets.TERRAFORM_TFVARS }}
          EOF

      - name: Terraform Init
        run: terraform init -input=false -lock-timeout=5m

      - name: Terraform Apply (prod)
        env:
          IMAGE_TAG: ${{ needs.build-application.outputs.image_tag }}
        run: |
          terraform apply \
            -auto-approve \
            -input=false \
            -lock-timeout=5m \
            -var-file=terraform.tfvars \
            -var="image_version=${IMAGE_TAG}"

  # --- JOB 4: Terraform Apply for dev (non-main branches) ---
  apply-dev:
    name: Terraform Apply (dev)
    runs-on: ubuntu-latest
    needs: build-application
    if: github.ref != 'refs/heads/main' && github.event_name == 'push'
    environment: dev
    defaults:
      run:
        shell: bash
        working-directory: ./infrastructure
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TERRAFORM_IAM_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Verify AWS Identity
        run: aws sts get-caller-identity

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3

      - name: Write terraform.tfvars from secret
        run: |
          umask 077
          cat > terraform.tfvars << 'EOF'
          ${{ secrets.TERRAFORM_TFVARS }}
          EOF

      - name: Terraform Init
        run: terraform init -input=false -lock-timeout=5m

      - name: Terraform Apply (dev)
        env:
          IMAGE_TAG: ${{ needs.build-application.outputs.image_tag }}
        run: |
          terraform apply \
            -auto-approve \
            -input=false \
            -lock-timeout=5m \
            -var-file=terraform.tfvars \
            -var="image_version=${IMAGE_TAG}"
