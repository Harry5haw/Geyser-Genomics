name: Deploy Platform to AWS

on:
  push:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'infrastructure/**'
      - 'Dockerfile'
  pull_request:
    paths:
      - 'infrastructure/**'
      - 'Dockerfile'
  workflow_dispatch: {} # allow manual runs on any branch

permissions:
  id-token: write
  contents: read
  pull-requests: write

# Prevent overlapping Terraform runs per ref
concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # --- JOB 1: Build and Push the Application Image ---
  build-application:
    name: Build and Push App to ECR
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
    outputs:
      image_tag: ${{ steps.get-sha.outputs.sha }}
    steps:
      - uses: actions/checkout@v4

      - name: Debug GitHub context
        run: |
          echo "GITHUB_REF=$GITHUB_REF"
          echo "GITHUB_SHA=$GITHUB_SHA"
          echo "GITHUB_ACTOR=$GITHUB_ACTOR"
          echo "GITHUB_EVENT_NAME=$GITHUB_EVENT_NAME"

      - name: Get short Git SHA
        id: get-sha
        run: echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ECR_IAM_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, Tag, and Push Docker Image
        if: github.event_name == 'workflow_dispatch' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: geyser-app
          IMAGE_TAG: ${{ steps.get-sha.outputs.sha }}
        run: |
          echo "Building Docker image for $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker build --no-cache -f Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "✅ Successfully pushed image with tag: $IMAGE_TAG"

      - name: Post image info to GitHub summary
        run: |
          echo "### Image Built and Pushed ✅" >> $GITHUB_STEP_SUMMARY
          echo "- Registry: $ECR_REGISTRY" >> $GITHUB_STEP_SUMMARY
          echo "- Repository: geyser-app" >> $GITHUB_STEP_SUMMARY
          echo "- Tag: ${{ steps.get-sha.outputs.sha }}" >> $GITHUB_STEP_SUMMARY

  # --- JOB 2: Terraform Plan on PRs ---
  plan-pr:
    name: Terraform Plan (PR)
    runs-on: ubuntu-latest
    needs: build-application
    if: github.event_name == 'pull_request'
    environment:
      name: dev
    defaults:
      run:
        shell: bash
        working-directory: ./infrastructure
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TERRAFORM_IAM_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3
      - name: Write terraform.tfvars from secret
        run: |
          umask 077
          cat > terraform.tfvars << 'EOF'
          ${{ secrets.TERRAFORM_TFVARS }}
          EOF
      - name: Terraform Init
        run: terraform init -input=false -lock-timeout=5m
      - name: Terraform Validate
        run: terraform validate -no-color
      - name: Terraform Plan
        env:
          IMAGE_TAG: ${{ needs.build-application.outputs.image_tag }}
        run: |
          echo "Using IMAGE_TAG=${IMAGE_TAG}"
          terraform plan \
            -no-color \
            -input=false \
            -lock-timeout=5m \
            -var-file=terraform.tfvars \
            -var="image_version=${IMAGE_TAG}"

  # --- JOB 3: Terraform Apply on push to main (prod) ---
  apply-main:
    name: Terraform Apply (main)
    runs-on: ubuntu-latest
    needs: build-application
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: prod
    defaults:
      run:
        shell: bash
        working-directory: ./infrastructure
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TERRAFORM_IAM_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3
      - name: Write terraform.tfvars from secret
        run: |
          umask 077
          cat > terraform.tfvars << 'EOF'
          ${{ secrets.TERRAFORM_TFVARS }}
          EOF
      - name: Terraform Init
        run: terraform init -input=false -lock-timeout=5m
      - name: Terraform Apply
        env:
          IMAGE_TAG: ${{ needs.build-application.outputs.image_tag }}
        run: |
          echo "Applying with IMAGE_TAG=${IMAGE_TAG}"
          terraform apply \
            -auto-approve \
            -input=false \
            -lock-timeout=5m \
            -var-file=terraform.tfvars \
            -var="image_version=${IMAGE_TAG}"

      - name: Verify AWS Batch Job Definition
        run: |
          echo "Checking AWS Batch job definition..."
          aws batch describe-job-definitions \
            --job-definition-name geyser-app-job \
            --query "jobDefinitions[*].{image:containerProperties.image, revision:revision}" \
            --output json | tee batch_job_def.json
          cat batch_job_def.json | jq .
          if jq -e '.[] | select(.image | contains(":latest"))' batch_job_def.json > /dev/null; then
            echo "❌ Batch is still using :latest"
            exit 1
          else
            echo "✅ Batch is pinned to a SHA"
          fi

  # --- JOB 4: Manual dev apply ---
  apply-dev-manual:
    name: Terraform Apply (manual - dev)
    runs-on: ubuntu-latest
    needs: build-application
    if: github.event_name == 'workflow_dispatch' && github.ref != 'refs/heads/main'
    environment:
      name: dev
    defaults:
      run:
        shell: bash
        working-directory: ./infrastructure
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TERRAFORM_IAM_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3
      - name: Write terraform.tfvars from secret
        run: |
          umask 077
          cat > terraform.tfvars << 'EOF'
          ${{ secrets.TERRAFORM_TFVARS }}
          EOF
      - name: Terraform Init
        run: terraform init -input=false -lock-timeout=5m
      - name: Terraform Apply (dev)
        env:
          IMAGE_TAG: ${{ needs.build-application.outputs.image_tag }}
        run: |
          echo "Applying with IMAGE_TAG=${IMAGE_TAG}"
          terraform apply \
            -auto-approve \
            -input=false \
            -lock-timeout=5m \
            -var-file=terraform.tfvars \
            -var="image_version=${IMAGE_TAG}"
